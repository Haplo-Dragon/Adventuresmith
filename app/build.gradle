apply plugin: 'com.android.application'
apply plugin: 'groovyx.android'
apply plugin: 'com.neenbedankt.android-apt' // must be after groovy plugin
apply plugin: "org.sonarqube"
apply plugin: 'io.fabric'

apply from: "$rootDir/gradle/signing.gradle"

androidGitVersion {
    // default:
    //format = '%tag%%.count%%<commit>%%-branch%%...dirty%'
    format = '%tag%%.count%%-commit%%-branch%'
}

ext {
    groovyVersion = '2.4.7'
    androidSupportVersion = '24.2.0'
    junitVersion = '4.12'
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"
    defaultConfig {
        applicationId "org.steavesea.rpgpad"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode androidGitVersion.code()
        versionName androidGitVersion.name()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file("$keystorePath")
            storePassword "$keystorePassword"
            keyAlias "$storeKeyAlias"
            keyPassword "$aliasKeyPassword"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            minifyEnabled false
            debuggable true
            applicationIdSuffix
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        warning 'InvalidPackage' // lint sees references in the grooid jar to unavailable java classes
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/org.codehaus.groovy.runtime.ExtensionModule'
        exclude 'META-INF/services/org.codehaus.groovy.transform.ASTTransformation'
    }
}

androidGroovy {
    // setup custom groovy compile options
    options {
        configure(groovyOptions) {
            javaAnnotationProcessing = true
            configurationScript = file("$projectDir/config/groovy-compile-options.groovy")
        }
    }
    // skip javac MUST be false for not set for apt to work correctly
}

sonarqube {
    properties {
        property "sonar.projectName", "RPG-Pad :: Simple Project :: Generate nonsense at push of a button!"
        property "sonar.projectKey", "org.stevesea:rpgpad"

        property "sonar.sourceEncoding","UTF-8"
        property "sonar.sources","."
        property "sonar.exclusions","build/**,**/*.png"

        property "sonar.import_unknown_files", true

        property "sonar.android.lint.report", "./build/outputs/lint-results.xml"
    }
}

dependencies {
    compile "org.codehaus.groovy:groovy:$groovyVersion:grooid"

    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:$junitVersion"
    testCompile 'org.mockito:mockito-core:1.10.19'

    compile 'com.samskivert:jmustache:1.13'

    compile 'com.arasthel:swissknife:1.4.0'

    compile "com.android.support:appcompat-v7:$androidSupportVersion"
    compile "com.android.support:design:$androidSupportVersion"
    compile "com.android.support:percent:$androidSupportVersion"
    compile "com.android.support:recyclerview-v7:$androidSupportVersion"
    compile "com.android.support:cardview-v7:$androidSupportVersion"

    provided 'javax.annotation:jsr250-api:1.0'
    compile 'javax.inject:javax.inject:1'

    compile('com.crashlytics.sdk.android:crashlytics:2.6.4@aar') {
        transitive = true;
    }

    // used to provide out of the box icon font support. simplifies development,
    // and provides scalable icons. the core is very very light
    // https://github.com/mikepenz/Android-Iconics
    compile 'com.mikepenz:iconics-core:2.8.0@aar'
    compile 'com.mikepenz:community-material-typeface:1.5.54.2@aar'
    compile 'com.mikepenz:ionicons-typeface:2.0.1.2@aar'

    compile('com.mikepenz:materialdrawer:5.6.0@aar') {
        transitive = true
    }

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
}

// APT doesn't know to make these directories for tests. Force them to
// be written.
afterEvaluate {
    def createAptTestDirs = tasks.create('createAptTestDirs')
    createAptTestDirs.doFirst {
        file("$buildDir/generated/source/apt/test/debug").mkdirs()
        file("$buildDir/generated/source/apt/test/release").mkdirs()
    }
    tasks.getByName('mockableAndroidJar').finalizedBy(createAptTestDirs)
}


tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
    }
}
repositories {
    mavenCentral()
}
